# 标签关系演示示例
---
# 演示：三个标签的作用和关系
apiVersion: apps/v1
kind: Deployment
metadata:
  name: label-demo-deployment
  labels:
    # 🏷️ 位置1: Deployment自身的标签 (可以独立设置)
    app: my-deployment-label          # ✅ 可以和其他两个不同
    version: v1.0
    component: web-frontend
spec:
  replicas: 2
  selector:
    # 🎯 位置2: Deployment选择Pod的标签 (必须匹配Pod标签)
    matchLabels:
      app: my-pod-app                 # ❗ 必须与Pod template标签完全匹配
      tier: frontend
  template:
    metadata:
      labels:
        # 🏷️ 位置3: Pod实际的标签 (必须匹配selector)
        app: my-pod-app               # ❗ 必须与selector.matchLabels匹配
        tier: frontend                # ❗ 必须与selector.matchLabels匹配
        version: v1.0                 # ✅ 可以有额外标签
        instance: pod-instance
    spec:
      containers:
      - name: web-server
        image: nginx:1.21
        ports:
        - containerPort: 80

---
# Service选择Pod
apiVersion: v1
kind: Service
metadata:
  name: label-demo-service
  labels:
    # 🏷️ Service自身的标签 (可以独立设置)
    app: my-service-label             # ✅ 可以和其他完全不同
    component: load-balancer
spec:
  type: ClusterIP
  selector:
    # 🎯 Service选择Pod的标签 (必须匹配Pod标签)
    app: my-pod-app                   # ❗ 必须匹配Pod上的标签
    tier: frontend                    # ❗ 必须匹配Pod上的标签
  ports:
    - port: 80
      targetPort: 80

---
# 对比：错误的配置示例 (注释掉，仅用于说明)
# apiVersion: v1
# kind: Service
# metadata:
#   name: wrong-service
# spec:
#   selector:
#     app: wrong-label              # ❌ 找不到匹配的Pod，Service无效
#   ports:
#     - port: 80 