apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: geo-gray-release
  namespace: default
  labels:
    app: geo-gray
    release-type: geographic
spec:
  replicas: 8
  strategy:
    canary:
      steps:
      # 第一阶段：开发和测试环境 (5%)
      - setWeight: 5
      - pause: {duration: 10}
      
      # 第二阶段：华东地区 (20%)
      - setWeight: 20
      - pause: {}
      - analysis:
          templates:
          - templateName: gray-user-experience
          args:
          - name: canary-service
            value: geo-gray-canary-service.default.svc.cluster.local
          - name: stable-service
            value: geo-gray-stable-service.default.svc.cluster.local
      
      # 第三阶段：华南地区 (40%)
      - setWeight: 40
      - pause: {duration: 30}
      
      # 第四阶段：华北和华中地区 (70%)
      - setWeight: 70
      - pause: {}
      - analysis:
          templates:
          - templateName: gray-business-metrics
          args:
          - name: service-name
            value: geo-gray-canary-service.default.svc.cluster.local
      
      # 第五阶段：西部地区和全国 (100%)
      - setWeight: 100

      # 流量路由配置
      trafficRouting:
        nginx:
          stableIngress: geo-gray-stable-ingress
          annotationPrefix: nginx.ingress.kubernetes.io
          additionalIngressAnnotations:
            canary-by-header: "X-User-Region"
            canary-by-header-value: "east,south,north,central,west"
            canary-by-cookie: "user_region"

  selector:
    matchLabels:
      app: geo-gray
  template:
    metadata:
      labels:
        app: geo-gray
        version: "v3"
        region: "multi"
    spec:
      containers:
      - name: geo-app
        image: nginx:1.21
        ports:
        - containerPort: 80
        env:
        - name: APP_VERSION
          value: "v3.0"
        - name: DEPLOYMENT_TYPE
          value: "geographic-gray"
        - name: SUPPORTED_REGIONS
          value: "east,south,north,central,west"
        volumeMounts:
        - name: geo-config
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "300m"
      volumes:
      - name: geo-config
        configMap:
          name: geo-gray-config
---
apiVersion: v1
kind: Service
metadata:
  name: geo-gray-stable-service
  namespace: default
  labels:
    app: geo-gray
    version: stable
spec:
  selector:
    app: geo-gray
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: geo-gray-canary-service
  namespace: default
  labels:
    app: geo-gray
    version: canary
spec:
  selector:
    app: geo-gray
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: geo-gray-public-service
  namespace: default
spec:
  selector:
    app: geo-gray
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30083
  type: NodePort
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: geo-gray-config
  namespace: default
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>地理位置灰度发布演示</title>
        <meta charset="UTF-8">
        <style>
            body { 
                font-family: 'Microsoft YaHei', Arial, sans-serif; 
                margin: 40px; 
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                min-height: 100vh;
            }
            .container { 
                background: rgba(255,255,255,0.1); 
                padding: 30px; 
                border-radius: 15px; 
                text-align: center;
                backdrop-filter: blur(10px);
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            }
            .version { 
                font-size: 28px; 
                font-weight: bold; 
                color: #ffeaa7;
                margin-bottom: 20px;
            }
            .region-info { 
                background: rgba(0,0,0,0.2);
                padding: 20px;
                border-radius: 10px;
                margin: 20px 0;
            }
            .badge {
                background: linear-gradient(45deg, #6c5ce7, #a29bfe);
                padding: 8px 20px;
                border-radius: 25px;
                display: inline-block;
                margin: 5px;
                font-weight: bold;
            }
            .region-badge {
                background: linear-gradient(45deg, #00b894, #00cec9);
                padding: 5px 15px;
                border-radius: 20px;
                display: inline-block;
                margin: 3px;
                font-size: 14px;
            }
            .status {
                font-size: 18px;
                color: #55efc4;
                font-weight: bold;
            }
            .timeline {
                text-align: left;
                background: rgba(0,0,0,0.1);
                padding: 20px;
                border-radius: 10px;
                margin: 20px 0;
            }
            .phase {
                margin: 10px 0;
                padding: 10px;
                border-left: 4px solid #ffeaa7;
                background: rgba(255,255,255,0.05);
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>🌏 地理位置灰度发布演示</h1>
            <div class="version">版本: v3.0</div>
            
            <div class="region-info">
                <h3>🎯 发布策略：地理分区</h3>
                <div class="badge">地理位置路由</div>
                <div class="badge">分区发布</div>
                <div class="badge">风险控制</div>
                <br><br>
                <div>支持地区：</div>
                <div class="region-badge">华东</div>
                <div class="region-badge">华南</div>
                <div class="region-badge">华北</div>
                <div class="region-badge">华中</div>
                <div class="region-badge">西部</div>
            </div>

            <div class="status" id="userRegion">检测用户地区中...</div>
            
            <div class="timeline">
                <h3>📅 发布时间线</h3>
                <div class="phase">
                    <strong>阶段1 (5%):</strong> 开发测试环境
                </div>
                <div class="phase">
                    <strong>阶段2 (20%):</strong> 华东地区用户
                </div>
                <div class="phase">
                    <strong>阶段3 (40%):</strong> 华南地区用户
                </div>
                <div class="phase">
                    <strong>阶段4 (70%):</strong> 华北华中地区用户
                </div>
                <div class="phase">
                    <strong>阶段5 (100%):</strong> 西部地区和全国用户
                </div>
            </div>

            <div style="margin-top: 30px;">
                <h3>🔍 用户识别</h3>
                <p>基于以下方式识别用户地理位置：</p>
                <ul style="text-align: left;">
                    <li>🗺️ IP地址地理定位</li>
                    <li>🍪 用户Cookie中的地区信息</li>
                    <li>📱 HTTP Header中的地区标识</li>
                    <li>👤 用户账户绑定的地区</li>
                </ul>
            </div>

            <div style="margin-top: 20px; font-size: 12px; opacity: 0.8;">
                Pod: <span id="podName">${POD_NAME}</span> | 
                部署类型: 地理位置灰度发布 | 
                时间: <span id="currentTime"></span>
            </div>
        </div>

        <script>
            // 模拟地理位置检测
            function detectUserRegion() {
                const regions = ['华东', '华南', '华北', '华中', '西部'];
                const cookies = document.cookie;
                const userAgent = navigator.userAgent;
                
                // 检查Cookie中的地区信息
                let region = getCookie('user_region');
                
                // 检查URL参数
                if (!region) {
                    const urlParams = new URLSearchParams(window.location.search);
                    region = urlParams.get('region');
                }
                
                // 模拟基于IP的地理定位
                if (!region) {
                    region = regions[Math.floor(Math.random() * regions.length)];
                }
                
                return region;
            }
            
            function getCookie(name) {
                const value = "; " + document.cookie;
                const parts = value.split("; " + name + "=");
                if (parts.length === 2) return parts.pop().split(";").shift();
                return null;
            }
            
            function updateDisplay() {
                const region = detectUserRegion();
                document.getElementById('userRegion').innerHTML = 
                    `🌍 检测到您的地区: <span style="color: #ffeaa7;">${region}</span>`;
                
                // 根据地区设置不同的背景色
                const regionColors = {
                    '华东': 'linear-gradient(135deg, #667eea, #764ba2)',
                    '华南': 'linear-gradient(135deg, #f093fb, #f5576c)',
                    '华北': 'linear-gradient(135deg, #4facfe, #00f2fe)',
                    '华中': 'linear-gradient(135deg, #43e97b, #38f9d7)',
                    '西部': 'linear-gradient(135deg, #fa709a, #fee140)'
                };
                
                if (regionColors[region]) {
                    document.body.style.background = regionColors[region];
                }
                
                // 更新时间
                document.getElementById('currentTime').textContent = 
                    new Date().toLocaleString('zh-CN');
            }
            
            // 初始化显示
            updateDisplay();
            
            // 每10秒更新一次时间
            setInterval(() => {
                document.getElementById('currentTime').textContent = 
                    new Date().toLocaleString('zh-CN');
            }, 10000);
        </script>
    </body>
    </html>
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: geo-gray-stable-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - host: geo-demo.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: geo-gray-stable-service
            port:
              number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: geo-gray-canary-ingress
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-by-header: "X-User-Region"
    nginx.ingress.kubernetes.io/canary-by-header-value: "east,south,north,central,west"
    nginx.ingress.kubernetes.io/canary-by-cookie: "user_region"
    nginx.ingress.kubernetes.io/canary-weight: "0"
spec:
  ingressClassName: nginx
  rules:
  - host: geo-demo.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: geo-gray-canary-service
            port:
              number: 80 