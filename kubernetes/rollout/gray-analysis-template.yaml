apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: gray-success-rate
  namespace: default
spec:
  args:
  - name: service-name
  - name: user-type
    value: "beta"
  metrics:
  - name: beta-user-success-rate
    interval: 2m
    count: 5
    successCondition: result[0] >= 0.95
    failureCondition: result[0] < 0.90
    failureLimit: 2
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          sum(rate(http_requests_total{service="{{ args.service-name }}", user_type="{{ args.user-type }}", status=~"2.."}[2m])) /
          sum(rate(http_requests_total{service="{{ args.service-name }}", user_type="{{ args.user-type }}"}[2m]))
  - name: internal-user-feedback
    interval: 5m
    count: 3
    successCondition: result[0] >= 4.0
    failureLimit: 1
    provider:
      job:
        spec:
          template:
            spec:
              containers:
              - name: feedback-checker
                image: curlimages/curl:latest
                command: [sh, -c]
                args: 
                - |
                  # 模拟内部用户反馈检查
                  FEEDBACK_SCORE=$(curl -s "http://{{ args.service-name }}/api/feedback?user_type=internal" | jq -r '.average_score // 4.5')
                  echo "Internal user feedback score: $FEEDBACK_SCORE"
                  echo $FEEDBACK_SCORE
              restartPolicy: Never
          backoffLimit: 2
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: gray-user-experience
  namespace: default
spec:
  args:
  - name: canary-service
  - name: stable-service
  metrics:
  - name: response-time-comparison
    interval: 1m
    count: 10
    successCondition: result[0] <= result[1] * 1.2  # 灰度版本响应时间不超过稳定版本的120%
    failureLimit: 3
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          [
            histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{service="{{ args.canary-service }}"}[1m])),
            histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{service="{{ args.stable-service }}"}[1m]))
          ]
  - name: error-rate-threshold
    interval: 30s
    count: 20
    successCondition: result[0] <= 0.05  # 错误率不超过5%
    failureCondition: result[0] > 0.10   # 错误率超过10%直接失败
    failureLimit: 5
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          sum(rate(http_requests_total{service="{{ args.canary-service }}", status=~"5.."}[1m])) /
          sum(rate(http_requests_total{service="{{ args.canary-service }}"}[1m]))
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: gray-business-metrics
  namespace: default
spec:
  args:
  - name: service-name
  - name: business-kpi
    value: "conversion_rate"
  metrics:
  - name: conversion-rate
    interval: 5m
    count: 6
    successCondition: result[0] >= 0.85  # 转化率不低于85%
    failureLimit: 2
    provider:
      web:
        url: "http://{{ args.service-name }}/api/metrics/{{ args.business-kpi }}"
        headers:
        - key: Authorization
          value: "Bearer monitoring-token"
        - key: User-Agent
          value: "Argo-Rollouts-Analyzer"
        jsonPath: "{$.value}"
  - name: user-satisfaction
    interval: 3m
    count: 8
    successCondition: result[0] >= 4.0  # 用户满意度不低于4.0分
    failureLimit: 3
    provider:
      job:
        spec:
          template:
            spec:
              containers:
              - name: satisfaction-checker
                image: appropriate/curl
                command: [sh, -c]
                args:
                - |
                  # 检查用户满意度
                  SATISFACTION=$(curl -s -H "X-Service: {{ args.service-name }}" \
                    "http://feedback-api.default.svc.cluster.local/satisfaction" | \
                    jq -r '.average_score // 4.2')
                  echo "User satisfaction: $SATISFACTION"
                  echo $SATISFACTION
              restartPolicy: Never
          backoffLimit: 3
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: gray-security-check
  namespace: default
spec:
  args:
  - name: target-service
  metrics:
  - name: security-scan
    count: 1
    successCondition: result[0] == 0  # 无安全漏洞
    failureLimit: 1
    provider:
      job:
        spec:
          template:
            spec:
              containers:
              - name: security-scanner
                image: owasp/zap2docker-stable:latest
                command: [sh, -c]
                args:
                - |
                  # 运行安全扫描
                  echo "Running security scan on {{ args.target-service }}"
                  # 模拟安全扫描，实际环境中应该使用真实的安全扫描工具
                  VULNERABILITIES=0
                  echo "Security scan completed. Vulnerabilities found: $VULNERABILITIES"
                  echo $VULNERABILITIES
              restartPolicy: Never
          backoffLimit: 1 